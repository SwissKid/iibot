#!/bin/bash
ops=$(getopt -q -o DFho:d::c: -l Daemon,daemon,help,output:,logfile:,foreground,debug::,logdir:,config:,configuration: -- "$@")
export ops
source ./functions
function usage() {
##Help message
source ./configuration
cat << EOF
Usage: $0 options

This is a bot made by swiss to do basic stuff with IRC.
OPTIONS:
	$(maketext bold)-h$(maketext reset) or $(maketext bold)--help$(maketext reset)
		Show this help
		
	$(maketext bold)-d$(maketext reset) or $(maketext bold)--debug$(maketext reset) (number)
		Change debugging level. 1 logs just about nothing, 2 logs stderr 3 logs
			additional info, and 4 and 5 make you feel good/fill your HDD.
		$(maketext bold)Default: Level 2 $(maketext reset)
	$(maketext bold)-D$(maketext reset) or $(maketext bold)--Daemon$(maketext reset)
		Run the bot as a Daemon. This is jenky right now, I suggest you just add
			a & to the end and background it yourself.
	$(maketext bold)-F$(maketext reset) or $(maketext bold)--Foreground$(maketext reset)
		Prevents the bot from becoming a daemon and does all logging
			to the terminal.
	$(maketext bold)-o$(maketext reset) or $(maketext bold)--logfile$(maketext reset) (file)
		Choose an alternate logfile to have the log written to for this run.
		$(maketext bold)Default: $logdir $(maketext normal)
	$(maketext bold)-c$(maketext reset) or $(maketext bold)--config$(maketext reset) (file)
		Choose an alternate configuration file 
		$(maketext bold)Default: $iidir/configuration$(maketext normal)
EOF
exit 0
}


##Terminal Testing Time
##If I end up wanting more tests than tput I'll move this to bin/termtests
if tput init; then
	export tmuxable="true"
fi
daemon="false"
debuglevel=2
##Checking the options
if [ "$ops" ]; then
	eval set -- $ops
	while true; do
		case $1 in
			-D| --[Dd]aemon)daemon="true";echo "Daemon mode enabled"; shift;;
			-c| --config*) conf="$2"; shift 2;;
			-h| --help) usage; shift;;
			-o| --logfile) logfile="$2"; shift 2 ;;
			-F| --[fF]oreground) daemon="false"; shift ;;
			--logdir) logdir="$2"; shift 2 ;;
			--debug | -d) if [ -z "$2" ]; then debuglevel=2; else if [[ "$2" -ge 1 ]] && [[ "$2" -le 5 ]];then debuglevel="$2"; else echo "The debug level is set to $2, which is not between 1 and 5."; exit 1; fi; fi; shift 2;;
			--)shift;break;;
			*)echo "I do not recognize $i as an option, have a read...."; usage; shift ;;

		esac
	done
fi
export debuglevel
##Conf File
if [ -z "$conf" ]; then
	cp ./configuration runningconf.cnf
else
	if [ -a "$conf" ]; then
		source "$conf"
		cp $conf runningconf.cnf
	else
		echo "$conf configuration file doesn't seem to exist! Now exiting."
		exit 1
	fi
fi
source ./runningconf.cnf

##Puttin the logfile away
if [ -z "$logfile" ]; then
	##logging
	datetime=$(date +%d%m%y)
	if [ -a $logdir/bot.log.$datetime ]; then
		if [ -a $logdir/bot.log.$datetime.01 ]; then
			number=$(expr "$(ls -t $logdir | head -n 1 | sed -e "s/^.*$datetime\.//")" "+" 1 )
		else
			number=1
		fi
		mv "$logdir/bot.log" "$logdir/bot.log.$datetime.$number"
	elif [ -a "$logdir/bot.log" ]; then
		mv "$logdir/bot.log" "$logdir/bot.log.$datetime"
	fi
	logfile="$logdir/bot.log"
fi


##I need to figure out how to fix this
#for i in $(echo -n `seq -s " " 2 $debuglevel`); do
#	echo $i
#	echo {$i}and
#	exec `echo ${i/%/>&1}`
#done
#for i in $(echo -n `seq -s " " $(expr "$debuglevel" "+" 1) 5`); do
#	echo $i
#	echo {$i}and
#	exec ${i/%/>/dev/null}
#done

##Due to the fact the core had to be seperated for logging, the
##core is executed here.
source ./core
if [ "$daemon" == "true" ]; then
	echo "sorry, but Daemonization is a bit quirky right now, so it's disabled. Feel free to background it yourself."
	startii > $logfile
##When daemonized I haven't found a clean way to quit yet. This is a serious issue.
#	startii > $logfile &
#	echo "$!" > corepid
else
	startii | tee $logfile
fi
